---
# Dynamic mode first checks which version is available in the package manager
# If that version satisfies the required version, it installs it via package
# Otherwise, it installs the required version via source
- name: Install lazygit OS-specific dynamically
  block:
    - name: Import installed lazygit version check
      ansible.builtin.include_tasks: noauto_check_installed_version.yml
      when: lazygit_installed_version is not defined

    - name: Force install if the version numbers do not match
      ansible.builtin.set_fact:
        lazygit_force_install: true
      when:
        - lazygit_installed_version is defined
        - lazygit_installed_version != lazygit_version

    - name: Install lazygit dynamically
      when: lazygit_installed_version is not defined or lazygit_force_install
      block:
        - name: Check lazygit pkg mgr version
          ansible.builtin.include_tasks: "{{ task_file }}"
          with_first_found:
            - "noauto_check_pkg_mgr_version_{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
            - "noauto_check_pkg_mgr_version_{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
            - "noauto_check_pkg_mgr_version_{{ ansible_distribution }}.yml"
            - "noauto_check_pkg_mgr_version_{{ ansible_os_family }}.yml"
            - "noauto_check_pkg_mgr_version_{{ ansible_lsb.id }}.yml"
          loop_control:
            loop_var: task_file

        - name: Install lazygit from package manager
          ansible.builtin.include_tasks:
            file: noauto_install_package.yml
          when:
            - lazygit_pkg_mgr_version is defined
            - lazygit_pkg_mgr_version == lazygit_version

        - name: Install lazygit from source
          ansible.builtin.include_tasks:
            file: noauto_install_source.yml
          when:
            - lazygit_pkg_mgr_version is not defined
              or lazygit_pkg_mgr_version != lazygit_version
